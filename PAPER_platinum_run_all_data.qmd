---
title: "Gridsemble on Platinum Spike Dataset - Models on All Data"
author: "Jenna Landy"
date: "2023-12-21"
output: pdf_document
---

```{r message = FALSE}
source('PAPER_metrics_helpers.R')
load("PAPER_platinum_data.RData")
```

```{r message = FALSE}
remove.packages('gridsemblefdr')
library(devtools)
devtools::install_github('jennalandy/gridsemblefdr')
library(gridsemblefdr)
```

```{r}
library(locfdr)
library(fdrtool)
library(qvalue)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(ggdist)

color_list = list(
  "gridsemble" = "#E69F00",
  "locfdr" = "#D55E00",
  "fdrtool" = "#009E73",
  "qvalue" = "#0072B2"
)
```

## Run Methods

### Benchmarks

`locfdr` fails with default `pct0 = 0` because there are a few extreme outlier. We use `pct0 = 0.001` instead.

```{r}
locfdr_res <- locfdr(platinum_data$statistics, pct0 = 0.001)
fdrtool_res <- fdrtool(platinum_data$statistics, plot = 0)
qvalue_res <- qvalue(p_from_t(platinum_data$statistics, df = 4))
```

Note that the `df` mentioned in the warning of `locfdr` refers to the degrees of freedom for fitting the marginal distribution $f$, NOT the degrees of freedom of our test-statistics.

### Gridsemble

`gridsemble` takes in test statistics and, if known, the degrees of freedom for each test. In our case, there are 3 samples in each condition, so `df = (3-1) + (3-1) = 4`.
```{r}
set.seed(321)

fdrtool_grid = build_fdrtool_grid(
  platinum_data$statistics
)
nrow(fdrtool_grid)

locfdr_grid = build_locfdr_grid(
  platinum_data$statistics
)
nrow(locfdr_grid)

qvalue_grid = build_qvalue_grid(
  platinum_data$statistics
)
nrow(qvalue_grid)

gridsemble_res <- gridsemble(
  platinum_data$statistics,
  df = 4,
  locfdr_grid = locfdr_grid,
  fdrtool_grid = fdrtool_grid,
  qvalue_grid = qvalue_grid
)
```

## Evaluate Methods

### pi0 estimates
```{r}
list(
  'true' = mean(1 - platinum_data$fold_change$DE),
  'gridsemble' = gridsemble_res$pi0,
  'locfdr' = unlist(locfdr_res$fp0['mlest','p0']),
  'fdrtool' = unname(fdrtool_res$param[,'eta0']),
  'qvalue' = qvalue_res$pi0
)
```


### fdr metrics
```{r}
how = "symmetric"
platinum_data$Fdr = get_true_Fdr(
  platinum_data$statistics, 
  platinum_data$fold_change$DE,
  how = how
)

fdr_metrics = rbind(
  method_metrics(
    'gridsemble',
    estimated_fdr = gridsemble_res$fdr, 
    test_statistics = platinum_data$statistics,
    hypothesis_labels = platinum_data$fold_change$DE,
    true_Fdr = platinum_data$Fdr,
    how_Fdr = how
  ),
  method_metrics(
    'locfdr',
    estimated_fdr = locfdr_res$fdr, 
    test_statistics = platinum_data$statistics,
    hypothesis_labels = platinum_data$fold_change$DE,
    true_Fdr = platinum_data$Fdr,
    how_Fdr = how
  ),
  method_metrics(
    'fdrtool',
    estimated_fdr = fdrtool_res$lfdr, 
    test_statistics = platinum_data$statistics,
    hypothesis_labels = platinum_data$fold_change$DE,
    true_Fdr = platinum_data$Fdr,
    how_Fdr = how
  ),
  method_metrics(
    'qvalue',
    estimated_fdr = qvalue_res$lfdr, 
    test_statistics = platinum_data$statistics,
    hypothesis_labels = platinum_data$fold_change$DE,
    true_Fdr = platinum_data$Fdr,
    how_Fdr = how
  )
)

fdr_metrics = data.frame(fdr_metrics)
fdr_metrics
```

### Metrics on fdr estimates

```{r fig.width = 10, fig.height = 10}
par(mfrow = c(2,2))

plot(
  Fdr_from_fdr(gridsemble_res$fdr, platinum_data$statistics),
  platinum_data$Fdr,
  xlim = c(0,1),
  ylim = c(0,1),
  main = "gridsemble",
  xlab = 'estimated', ylab = 'true'
)
abline(0, 1)

plot(
  Fdr_from_fdr(locfdr_res$fdr, platinum_data$statistics),
  platinum_data$Fdr,
  xlim = c(0,1),
  ylim = c(0,1),
  main = "locfdr",
  xlab = 'estimated', ylab = 'true'
)
abline(0, 1)

plot(
  Fdr_from_fdr(qvalue_res$lfdr, platinum_data$statistics),
  platinum_data$Fdr,
  xlim = c(0,1),
  ylim = c(0,1),
  main = "qvalue",
  xlab = 'estimated', ylab = 'true'
)
abline(0, 1)

plot(
  Fdr_from_fdr(fdrtool_res$lfdr, platinum_data$statistics),
  platinum_data$Fdr,
  xlim = c(0,1),
  ylim = c(0,1),
  main = "fdrtool",
  xlab = 'estimated', ylab = 'true'
)
abline(0, 1)
```

### Classification Metrics

#### 0.2 cutoff

```{r}
cutoff = 0.2

classification_metrics_cutoff0.2 = rbind(
  classification_metrics(
    method = 'gridsemble',
    fdr = gridsemble_res$fdr, 
    pi0 = gridsemble_res$pi0,
    test_statistics = platinum_data$statistics,
    truth = platinum_data$fold_change$DE, 
    cutoff = cutoff
  ),
  classification_metrics(
    'locfdr',
    locfdr_res$fdr,
    locfdr_res$fp0['mlest','p0'],
    platinum_data$statistics,
    platinum_data$fold_change$DE, 
    cutoff = cutoff
  ),
  classification_metrics(
    'fdrtool',
    fdrtool_res$lfdr, 
    fdrtool_res$param[1,'eta0'],
    platinum_data$statistics,
    platinum_data$fold_change$DE, 
    cutoff = cutoff
  ),
  classification_metrics(
    'qvalue',
    qvalue_res$lfdr, 
    qvalue_res$pi0,
    platinum_data$statistics,
    platinum_data$fold_change$DE, 
    cutoff = cutoff
  )
)

classification_metrics_cutoff0.2
```

###$ cutoff based on $\hat\pi_0$

```{r}
gridsemble_cutoff <- quantile(gridsemble_res$fdr, 1-gridsemble_res$pi0)
fdrtool_cutoff <- quantile(fdrtool_res$lfdr, 1-unname(fdrtool_res$param[1,'eta0']))
locfdr_cutoff <- quantile(locfdr_res$fdr, 1-unname(locfdr_res$fp0['mlest','p0']))
qvalue_cutoff <- quantile(qvalue_res$lfdr, 1-qvalue_res$pi0)

classification_metrics_cutoff_pi0hat = rbind(
  classification_metrics(
    method = 'gridsemble',
    fdr = gridsemble_res$fdr, 
    pi0 = gridsemble_res$pi0,
    test_statistics = platinum_data$statistics,
    truth = platinum_data$fold_change$DE, 
    cutoff = gridsemble_cutoff
  ),
  classification_metrics(
    'locfdr',
    locfdr_res$fdr,
    locfdr_res$fp0['mlest','p0'],
    platinum_data$statistics,
    platinum_data$fold_change$DE, 
    cutoff = locfdr_cutoff
  ),
  classification_metrics(
    'fdrtool',
    fdrtool_res$lfdr, 
    fdrtool_res$param[1,'eta0'],
    platinum_data$statistics,
    platinum_data$fold_change$DE, 
    cutoff = fdrtool_cutoff
  ),
  classification_metrics(
    'qvalue',
    qvalue_res$lfdr, 
    qvalue_res$pi0,
    platinum_data$statistics,
    platinum_data$fold_change$DE, 
    cutoff = qvalue_cutoff
  )
)

classification_metrics_cutoff_pi0hat
```

###$ cutoff based on $\pi_0$

```{r}
pi0 = mean(platinum_data$fold_change$DE==0)
gridsemble_cutoff <- quantile(gridsemble_res$fdr, 1-pi0)
fdrtool_cutoff <- quantile(fdrtool_res$lfdr, 1-pi0)
locfdr_cutoff <- quantile(locfdr_res$fdr, 1-pi0)
qvalue_cutoff <- quantile(qvalue_res$lfdr, 1-pi0)

classification_metrics_cutoff_pi0 = rbind(
  classification_metrics(
    method = 'gridsemble',
    fdr = gridsemble_res$fdr, 
    pi0 = gridsemble_res$pi0,
    test_statistics = platinum_data$statistics,
    truth = platinum_data$fold_change$DE, 
    cutoff = gridsemble_cutoff
  ),
  classification_metrics(
    'locfdr',
    locfdr_res$fdr,
    locfdr_res$fp0['mlest','p0'],
    platinum_data$statistics,
    platinum_data$fold_change$DE, 
    cutoff = locfdr_cutoff
  ),
  classification_metrics(
    'fdrtool',
    fdrtool_res$lfdr, 
    fdrtool_res$param[1,'eta0'],
    platinum_data$statistics,
    platinum_data$fold_change$DE, 
    cutoff = fdrtool_cutoff
  ),
  classification_metrics(
    'qvalue',
    qvalue_res$lfdr, 
    qvalue_res$pi0,
    platinum_data$statistics,
    platinum_data$fold_change$DE, 
    cutoff = qvalue_cutoff
  )
)

classification_metrics_cutoff_pi0
```

What models made it into the ensemble?
```{r}
fdrtool_rows = gridsemble_res$top_grid[gridsemble_res$top_grid$method == 'fdrtool',]$row
gridsemble_res$fdrtool_grid[fdrtool_rows,]

locfdr_rows = gridsemble_res$top_grid[gridsemble_res$top_grid$method == 'locfdr',]$row
gridsemble_res$locfdr_grid[locfdr_rows,]

qvalue_rows = gridsemble_res$top_grid[gridsemble_res$top_grid$method == 'qvalue',]$row
gridsemble_res$qvalue_grid[qvalue_rows,]
```


### Calibration

```{r fig.height = 6, fig.width = 6}
plot_calibration(
  fdrs = list(
    "gridsemble" = gridsemble_res$fdr,
    "locfdr" = locfdr_res$fdr,
    "fdrtool" = fdrtool_res$lfdr,
    "qvalue" = qvalue_res$lfdr
  ),
  truth = platinum_data$fold_change$DE
)

ggsave("SupplementaryFigure3.png", height = 6, width = 6)
```


```{r}
data.frame(fdr=gridsemble_res$fdr, true =platinum_data$fold_change$DE) %>%
  ggplot(aes(x = fdr, color = as.factor(true), fill = as.factor(true))) +
  geom_histogram(position = 'identity', alpha = 0.2, bins = 20) +
  theme_few()
```


### Ensemble contributions

```{r}
gridsemble_res$top_grid %>%
    mutate(method = factor(method, levels = c('qvalue','locfdr','fdrtool'))) %>%
    pull(method) %>%
    table() %>%
    data.frame() %>%
    ggplot(aes(x = ., y = Freq)) +
    geom_bar(stat = 'identity') +
    theme_few() +
    labs(
        x = 'Inclusion to Ensemble',
        y = 'Count'
    )
```







